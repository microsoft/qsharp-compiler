# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

<#
    .SYNOPSIS
        Provides the list of artifacts (Packages and Assemblies) generated by this repository.
    
    .PARAMETER OutputFormat
        Specifies if the output of this script should be a hashtable with the artifacts
        as strings with the absolute path (AbsolutePath) or FileInfo structures.
#>
param(
    [ValidateSet('FileInfo', 'AbsolutePath')]
    [string] $OutputFormat = 'FileInfo'
);

& "$PSScriptRoot\set-env.ps1"


if ($Env:ENABLE_VSIX -ne "false") {
    # The language server is only built if either the VS2019 or VS Code extension
    # is enabled.
    $VsixAssemblies = @(
        ".\src\QsCompiler\LanguageServer\bin\$Env:BUILD_CONFIGURATION\netcoreapp3.1\Microsoft.Quantum.QsLanguageServer.dll",
        ".\src\VisualStudioExtension\QsharpVSIX\bin\$Env:BUILD_CONFIGURATION\Microsoft.Quantum.VisualStudio.Extension.dll"	
    );	
}
else {	
    $VsixAssemblies = @();	
}	

$artifacts = @{
    Packages = @(
        "Microsoft.Quantum.Compiler",
        "Microsoft.Quantum.DocumentationGenerator"
        "Microsoft.Quantum.ProjectTemplates",
        "Microsoft.Quantum.Sdk",
        "qsc"
    ) | ForEach-Object { Join-Path $Env:NUGET_OUTDIR "$_.$Env:NUGET_VERSION.nupkg" };

    Assemblies = $VsixAssemblies + @(
        ".\src\Documentation\DocumentationGenerator\bin\$Env:BUILD_CONFIGURATION\netstandard2.1\Microsoft.Quantum.DocumentationGenerator.dll",
        ".\src\Documentation\DocumentationParser\bin\$Env:BUILD_CONFIGURATION\netstandard2.1\Microsoft.Quantum.QsDocumentationParser.dll",
        ".\src\QsCompiler\BondSchemas\bin\$Env:BUILD_CONFIGURATION\netstandard2.1\Microsoft.Quantum.BondSchemas.dll",
        ".\src\QsCompiler\CompilationManager\bin\$Env:BUILD_CONFIGURATION\netstandard2.1\Microsoft.Quantum.QsCompilationManager.dll",
        ".\src\QsCompiler\Compiler\bin\$Env:BUILD_CONFIGURATION\netstandard2.1\Microsoft.Quantum.QsCompiler.dll",
        ".\src\QsCompiler\Core\bin\$Env:BUILD_CONFIGURATION\netstandard2.1\Microsoft.Quantum.QsCore.dll",
        ".\src\QsCompiler\DataStructures\bin\$Env:BUILD_CONFIGURATION\netstandard2.1\Microsoft.Quantum.QsDataStructures.dll",
        ".\src\QsCompiler\Optimizations\bin\$Env:BUILD_CONFIGURATION\netstandard2.1\Microsoft.Quantum.QsOptimizations.dll",
        ".\src\QsCompiler\SyntaxProcessor\bin\$Env:BUILD_CONFIGURATION\netstandard2.1\Microsoft.Quantum.QsSyntaxProcessor.dll",
        ".\src\QsCompiler\TextProcessor\bin\$Env:BUILD_CONFIGURATION\netstandard2.1\Microsoft.Quantum.QsTextProcessor.dll",
        ".\src\QsCompiler\Transformations\bin\$Env:BUILD_CONFIGURATION\netstandard2.1\Microsoft.Quantum.QsTransformations.dll"

        ".\src\QsCompiler\CommandLineTool\bin\$Env:BUILD_CONFIGURATION\netcoreapp3.1\qsc.dll",

        ".\src\QuantumSdk\Tools\BuildConfiguration\bin\$Env:BUILD_CONFIGURATION\netcoreapp3.1\Microsoft.Quantum.Sdk.BuildConfiguration.dll"
    ) | ForEach-Object { Join-Path $PSScriptRoot (Join-Path ".." $_) };
} 

if ($OutputFormat -eq 'FileInfo') {
    $artifacts.Packages = $artifacts.Packages | ForEach-Object { Get-Item $_ };
    $artifacts.Assemblies = $artifacts.Assemblies | ForEach-Object { Get-Item $_ };
}

$artifacts | Write-Output;
