# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

trigger: none

variables:
  CCACHE_DIR: $(Pipeline.Workspace)/ccache
  CMAKE_INSTALL_PREFIX: $(Pipeline.Workspace)/LLVM
  INSTALL_LLVM_PACKAGE: true
  SCCACHE_DIR: $(Pipeline.Workspace)\sccache
  AQ_LLVM_PACKAGE_GIT_VERSION: ""
  ENABLE_COMPILER: false
  ENABLE_VSIX: false
  ENABLE_LLVM_BUILDS: true
  AQ_DOWNLOAD_LLVM: false

jobs:
- job: GetLlvmSha
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - checkout: self
  - script: |
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: 'Checkout submodules'
  - pwsh:  Write-Host "##vso[task.setvariable variable=AQ_LLVM_PACKAGE_GIT_VERSION;isoutput=true]$(git rev-parse --short HEAD)"
    workingDirectory: $(System.DefaultWorkingDirectory)/external/llvm-project
    displayName: "Get LLVM SHA"
    name: Sha

- job: LLVMLinuxBuild
  timeoutInMinutes: 75
  dependsOn: GetLlvmSha
  displayName: LLVM Linux Build
  variables:
  - name: Aq.Llvm.Package.Git.Version
    value: $[ dependencies.GetLlvmSha.outputs['Sha.AQ_LLVM_PACKAGE_GIT_VERSION'] ]
  - name: Pkg.Name
    value: aq-llvm-x86_64-unknown-linux-gnu-$(Aq.Llvm.Package.Git.Version)

  pool:
    vmImage: 'ubuntu-20.04'

  steps:
  - checkout: self
  - script: |
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: 'Checkout submodules'

  - script: |
      sudo apt-get install -y ccache ninja-build
      echo "##vso[task.prependpath]/usr/lib/ccache"
    displayName: Install build dependencies, ccache, and update PATH to use linked versions of gcc, cc, etc

  - task: Cache@2
    inputs:
      key: 'version2 | ccache | "$(Agent.OS)"'
      path: $(CCACHE_DIR)
      restoreKeys: |
        version2 | ccache | "$(Agent.OS)"
    displayName: ccache

  - template: init.yml

  - pwsh: ./build/build.ps1
    displayName: "LLVM"
    workingDirectory: $(System.DefaultWorkingDirectory)

  - task: CopyFiles@2
    inputs:
      contents: $(System.DefaultWorkingDirectory)/external/llvm-project/build/$(Pkg.Name).tar.gz
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: $(Pkg.Name)


- job: LLVMWindowsBuild
  timeoutInMinutes: 180
  dependsOn: GetLlvmSha
  displayName: LLVM Windows Build
  variables:
  - name: Aq.Llvm.Package.Git.Version
    value: $[ dependencies.GetLlvmSha.outputs['Sha.AQ_LLVM_PACKAGE_GIT_VERSION'] ]
  - name: Pkg.Name
    value: aq-llvm-x86_64-pc-windows-msvc-static-$(Aq.Llvm.Package.Git.Version)
  pool:
    vmImage: 'windows-2019'

  steps:
  - checkout: self
  - script: |
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: 'Checkout submodules'

  - script: |
      choco install --accept-license -y sccache ninja
    displayName: Install build dependencies, sccache, and update PATH to use linked versions of gcc, cc, etc

  - pwsh: mkdir $(SCCACHE_DIR)
    displayName: "Create sccache dir"

  - task: Cache@2
    inputs:
      key: 'version7 | sccache | "$(Agent.OS)"'
      path: $(SCCACHE_DIR)
      restoreKeys: |
        version7 | sccache | "$(Agent.OS)"
    displayName: sccache

  - template: init.yml

  - pwsh: .\build\build.ps1
    displayName: "LLVM"
    workingDirectory: $(System.DefaultWorkingDirectory)

  - task: CopyFiles@2
    inputs:
      contents: $(System.DefaultWorkingDirectory)\external\llvm-project\build\$(Pkg.Name).zip
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: $(Pkg.Name)


- job: LLVMMacOS1014Build
  timeoutInMinutes: 75
  dependsOn: GetLlvmSha
  displayName: LLVM MacOS 10.14 Build
  variables:
  - name: Aq.Llvm.Package.Git.Version
    value: $[ dependencies.GetLlvmSha.outputs['Sha.AQ_LLVM_PACKAGE_GIT_VERSION'] ]
  - name: Pkg.Name
    value: aq-llvm-x86_64-apple-darwin-$(Aq.Llvm.Package.Git.Version)

  pool:
    vmImage: 'macOS-10.14'

  steps:
  - checkout: self
  - script: |
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: 'Checkout submodules'

  - script: |
      brew install ccache ninja
    displayName: Install build dependencies, ccache, and update PATH to use linked versions of gcc, cc, etc

  - task: Cache@2
    inputs:
      key: 'ccache | "$(Agent.OS)"'
      path: $(CCACHE_DIR)
      restoreKeys: |
        ccache | "$(Agent.OS)"
    displayName: ccache

  - template: init.yml

  - pwsh: ./build/build.ps1
    displayName: "LLVM"
    workingDirectory: $(System.DefaultWorkingDirectory)

  - task: CopyFiles@2
    inputs:
      contents: $(System.DefaultWorkingDirectory)/external/llvm-project/build/$(Pkg.Name).tar.gz
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: $(Pkg.Name)

- job: libLLVMAssembly
  timeoutInMinutes: 15
  dependsOn:
  - GetLlvmSha
  - LLVMLinuxBuild
  - LLVMWindowsBuild
  - LLVMMacOS1014Build
  displayName: libLLVM Assembly
  variables:
  - name: Aq.Llvm.Package.Git.Version
    value: $[ dependencies.GetLlvmSha.outputs['Sha.AQ_LLVM_PACKAGE_GIT_VERSION'] ]
  - name: Pkg.Name
    value: aq-llvm-libLLVM-$(Aq.Llvm.Package.Git.Version)
  - name: Linux.Pkg.Name
    value: aq-llvm-x86_64-unknown-linux-gnu-$(Aq.Llvm.Package.Git.Version)
  - name: Windows.Pkg.Name
    value: aq-llvm-x86_64-pc-windows-msvc-static-$(Aq.Llvm.Package.Git.Version)
  - name: Darwin.Pkg.Name
    value: aq-llvm-x86_64-apple-darwin-$(Aq.Llvm.Package.Git.Version)
  - name: Blobs.Outdir
    value: $(Pipeline.Workspace)/artifacts
  pool:
    vmImage: 'windows-2019'
  steps:
  - checkout: self
  - download: current
  - pwsh: ./build/libllvm.ps1
    displayName: "Package libLLVM and collect artifacts"
    workingDirectory: $(System.DefaultWorkingDirectory)
  - task: CopyFiles@2
    inputs:
      contents: $(System.DefaultWorkingDirectory)/$(Pkg.Name).zip
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: $(Pkg.Name)

  - task: AzureFileCopy@3
    displayName: 'Push LLVM to Azure blob storage'
    inputs:
      SourcePath: '$(Blobs.Outdir)/'
      azureSubscription: 'AzureRM / ms-quantum-public-storage'
      Destination: 'AzureBlob'
      storage: 'msquantumpublic'
      ContainerName: 'llvm-builds'
    continueOnError: false
