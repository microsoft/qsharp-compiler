// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.Quantum.QsCompiler.Templates
{
    using Microsoft.Quantum.QsCompiler.BondSchemas.EntryPoint;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class QirDriverCpp : QirDriverCppBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// This code was generated by a tool.
// <auto-generated />
//------------------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

#include <fstream>
#include <iostream>
#include <map>
#include <memory>
#include <vector>

#include ""CLI11.hpp""

#include ""QirContext.hpp""
#include ""QirRuntime.hpp""
#include ""SimFactory.hpp""

using namespace Microsoft::Quantum;
using namespace std;

struct InteropArray
{
    int64_t Size;
    void* Data;

    InteropArray(int64_t size, void* data) :
        Size(size),
        Data(data){}
};

using RangeTuple = tuple<int64_t, int64_t, int64_t>;
struct InteropRange
{
    int64_t Start;
    int64_t Step;
    int64_t End;

    InteropRange() :
        Start(0),
        Step(0),
        End(0){}

    InteropRange(RangeTuple rangeTuple) :
        Start(get<0>(rangeTuple)),
        Step(get<1>(rangeTuple)),
        End(get<2>(rangeTuple)){}
};

// This is the function corresponding to the QIR entry-point.
extern ""C"" void ");
            
            #line 55 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entryPointOperation.Name));
            
            #line default
            #line hidden
            this.Write("(\r\n    ");
            
            #line 56 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 foreach (var arg in entryPointOperation.Arguments) { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 57 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 if (arg.Type == DataType.IntegerType) { 
            
            #line default
            #line hidden
            this.Write("    int64_t ");
            
            #line 58 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 59 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.ArrayType == DataType.IntegerType) { 
            
            #line default
            #line hidden
            this.Write("    InteropArray* ");
            
            #line 60 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 61 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.DoubleType) { 
            
            #line default
            #line hidden
            this.Write("    double ");
            
            #line 62 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 63 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.ArrayType == DataType.DoubleType) { 
            
            #line default
            #line hidden
            this.Write("    InteropArray* ");
            
            #line 64 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 65 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.BoolType) { 
            
            #line default
            #line hidden
            this.Write("    char ");
            
            #line 66 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 67 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.ArrayType == DataType.BoolType) { 
            
            #line default
            #line hidden
            this.Write("    InteropArray* ");
            
            #line 68 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 69 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.PauliType) { 
            
            #line default
            #line hidden
            this.Write("    char ");
            
            #line 70 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 71 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.ArrayType == DataType.PauliType) { 
            
            #line default
            #line hidden
            this.Write("    InteropArray* ");
            
            #line 72 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 73 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.RangeType) { 
            
            #line default
            #line hidden
            this.Write("    InteropRange* ");
            
            #line 74 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 75 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ResultType) { 
            
            #line default
            #line hidden
            this.Write("    char ");
            
            #line 76 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 77 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.ArrayType == DataType.ResultType) { 
            
            #line default
            #line hidden
            this.Write("    InteropArray* ");
            
            #line 78 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 79 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.StringType) { 
            
            #line default
            #line hidden
            this.Write("    const char* ");
            
            #line 80 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n        ");
            
            #line 81 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 82 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write(");\r\n\r\nconst char InteropFalseAsChar = 0x0;\r\nconst char InteropTrueAsChar = 0x1;\r\n" +
                    "map<string, bool> BoolAsCharMap{\r\n    {\"0\", InteropFalseAsChar},\r\n    {\"false\", " +
                    "InteropFalseAsChar},\r\n    {\"1\", InteropTrueAsChar},\r\n    {\"true\", InteropTrueAsC" +
                    "har}};\r\n\r\nmap<string, PauliId> PauliMap{\r\n    {\"PauliI\", PauliId::PauliId_I},\r\n " +
                    "   {\"PauliX\", PauliId::PauliId_X},\r\n    {\"PauliY\", PauliId::PauliId_Y},\r\n    {\"P" +
                    "auliZ\", PauliId::PauliId_Z}};\r\n\r\nconst char InteropResultZeroAsChar = 0x0;\r\ncons" +
                    "t char InteropResultOneAsChar = 0x1;\r\nmap<string, char> ResultAsCharMap{\r\n    {\"" +
                    "0\", InteropResultZeroAsChar},\r\n    {\"Zero\", InteropResultZeroAsChar},\r\n    {\"1\"," +
                    " InteropResultOneAsChar},\r\n    {\"One\", InteropResultOneAsChar}\r\n};\r\n\r\ntemplate<t" +
                    "ypename T>\r\nunique_ptr<InteropArray> CreateInteropArray(vector<T>& v)\r\n{\r\n    un" +
                    "ique_ptr<InteropArray> array(new InteropArray(v.size(), v.data()));\r\n    return " +
                    "array;\r\n}\r\n\r\nunique_ptr<InteropRange> CreateInteropRange(RangeTuple rangeTuple)\r" +
                    "\n{\r\n    unique_ptr<InteropRange> range(new InteropRange(rangeTuple));\r\n    retur" +
                    "n range;\r\n}\r\n\r\ntemplate<typename T>\r\nvoid FreePointerVector(vector<T*>& v)\r\n{\r\n " +
                    "   for (auto p : v)\r\n    {\r\n        delete p;\r\n    }\r\n}\r\n\r\nchar TranslatePauliTo" +
                    "Char(PauliId& pauli)\r\n{\r\n    return static_cast<char>(pauli);\r\n}\r\n\r\ntemplate<typ" +
                    "ename S, typename D>\r\nvoid TranslateVector(vector<S>& sourceVector, vector<D>& d" +
                    "estinationVector, function<D(S&)> translationFunction)\r\n{\r\n    destinationVector" +
                    ".resize(sourceVector.size());\r\n    transform(sourceVector.begin(), sourceVector." +
                    "end(), destinationVector.begin(), translationFunction);\r\n}\r\n\r\nInteropRange* Tran" +
                    "slateRangeTupleToInteropRangePointer(RangeTuple& rangeTuple)\r\n{\r\n    InteropRang" +
                    "e* range = new InteropRange(rangeTuple);\r\n    return range;\r\n}\r\n\r\nconst char* Tr" +
                    "anslateStringToCharBuffer(string& s)\r\n{\r\n    return s.c_str();\r\n}\r\n\r\nint main(in" +
                    "t argc, char* argv[])\r\n{\r\n    CLI::App app(\"QIR Standalone Entry Point Inputs Re" +
                    "ference\");\r\n\r\n    // Initialize simulator.\r\n    unique_ptr<IRuntimeDriver> sim =" +
                    " CreateFullstateSimulator();\r\n    QirContextScope qirctx(sim.get(), false /*trac" +
                    "kAllocatedObjects*/);\r\n\r\n    // Add the --simulation-output options.\r\n    // N.B" +
                    ". This option should be present in all standalone drivers.\r\n    string simulatio" +
                    "nOutputFile;\r\n    CLI::Option* simulationOutputFileOpt = app.add_option(\r\n      " +
                    "  \"-s,--simulation-output\", simulationOutputFile,\r\n        \"File where the outpu" +
                    "t produced during the simulation is written\");\r\n\r\n    ");
            
            #line 168 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 foreach (var arg in entryPointOperation.Arguments) { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 169 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.IntegerType) { 
            
            #line default
            #line hidden
            this.Write("    // Add the options that correspond to the parameters that the QIR entry-point" +
                    " needs.\r\n    // Option for a Q# Int type.\r\n    int64_t ");
            
            #line 172 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(" = 0;\r\n    app.add_option(\"--");
            
            #line 173 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 173 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"An integer value\")->required();\r\n        ");
            
            #line 174 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.Type == DataType.IntegerType) { 
            
            #line default
            #line hidden
            this.Write("\r\n    // Option for a Q# Array<Int> type.\r\n    vector<int64_t> ");
            
            #line 177 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n    app.add_option(\"--");
            
            #line 178 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 178 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"An integer array\")->required();\r\n\r\n        ");
            
            #line 180 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.DoubleType) { 
            
            #line default
            #line hidden
            this.Write("    // Option for a Q# Double type.\r\n    double_t ");
            
            #line 182 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(" = 0.0;\r\n    app.add_option(\"--");
            
            #line 183 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 183 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"A double value\")->required();\r\n        ");
            
            #line 184 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.Type == DataType.DoubleType) { 
            
            #line default
            #line hidden
            this.Write("\r\n    // Option for a Q# Array<Double> type.\r\n    vector<double_t> ");
            
            #line 187 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n    app.add_option(\"--");
            
            #line 188 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 188 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"A double array\")->required();\r\n\r\n        ");
            
            #line 190 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.BoolType) { 
            
            #line default
            #line hidden
            this.Write("    // Option for a Q# Bool type.\r\n    char ");
            
            #line 192 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(" = InteropFalseAsChar;\r\n    app.add_option(\"--");
            
            #line 193 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 193 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"A bool value\")\r\n        ->required()\r\n        ->transform(CLI::CheckedTransfor" +
                    "mer(BoolAsCharMap, CLI::ignore_case));\r\n\r\n        ");
            
            #line 197 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.Type == DataType.BoolType) { 
            
            #line default
            #line hidden
            this.Write("    // Option for a Q# Array<Bool> type.\r\n    // N.B. For command line parsing, a" +
                    " char vector is used because vector<bool> is a specialized version of vector not" +
                    "\r\n    //      supported by CLI11.\r\n    vector<char> ");
            
            #line 201 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n    app.add_option(\"--");
            
            #line 202 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 202 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"A bool array\")\r\n        ->required()\r\n        ->transform(CLI::CheckedTransfor" +
                    "mer(BoolAsCharMap, CLI::ignore_case));\r\n        ");
            
            #line 205 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.PauliType) { 
            
            #line default
            #line hidden
            this.Write("\r\n    PauliId ");
            
            #line 207 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(" = PauliId::PauliId_I;\r\n    app.add_option(\"--");
            
            #line 208 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 208 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"A Pauli value\")\r\n        ->required()\r\n        ->transform(CLI::CheckedTransfo" +
                    "rmer(PauliMap, CLI::ignore_case));\r\n\r\n        ");
            
            #line 212 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.Type == DataType.PauliType) { 
            
            #line default
            #line hidden
            this.Write("    // Option for a Q# Array<Pauli> type.\r\n    std::vector<PauliId> ");
            
            #line 214 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n    app.add_option(\"--pauli-array\", ");
            
            #line 215 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"A Pauli array\")\r\n        ->required()\r\n        ->transform(CLI::CheckedTransfo" +
                    "rmer(PauliMap, CLI::ignore_case));\r\n        ");
            
            #line 218 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.RangeType) { 
            
            #line default
            #line hidden
            this.Write(@"    // Option for Q# Range type.
    // N.B. RangeTuple type is used here instead of QirRange because CLI11 supports tuple parsing which is leveraged and
    //      the tuple is later translated to QirRange.
    RangeTuple rangeTuple(0, 0, 0);
    app.add_option(""--");
            
            #line 223 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", rangeTuple, \"A Range value (start, step, end)\")->required();\r\n        ");
            
            #line 224 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.Type == DataType.PauliType) { 
            
            #line default
            #line hidden
            this.Write("    // Option for a Q# Array<Range> type.\r\n    vector<RangeTuple> ");
            
            #line 226 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n    app.add_option(\"--");
            
            #line 227 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 227 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"A Range array\")->required();\r\n        ");
            
            #line 228 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ResultType) { 
            
            #line default
            #line hidden
            this.Write("    // Option for Q# Result type.\r\n    // N.B. This is implemented as a char rath" +
                    "er than a boolean to be consistent with the way an array of results has to\r\n    " +
                    "//      be implemented.\r\n    char ");
            
            #line 232 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(" = InteropResultZeroAsChar;\r\n    app.add_option(\"--");
            
            #line 233 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 233 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"A Result value\")\r\n        ->required()\r\n        ->transform(CLI::CheckedTransf" +
                    "ormer(ResultAsCharMap, CLI::ignore_case));\r\n        ");
            
            #line 236 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.Type == DataType.ResultType) { 
            
            #line default
            #line hidden
            this.Write(@"    // Option for a Q# Array<Result> type.
    // N.B. Similarly to the case of Q# Array<bool>, for command line parsing, a char vector is used because CLI11 does
    //      not support vector<bool> since it is a specialized version of vector.
    vector<char> ");
            
            #line 240 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n    app.add_option(\"--");
            
            #line 241 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 241 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"A Result array\")\r\n        ->required()\r\n        ->transform(CLI::CheckedTransf" +
                    "ormer(ResultAsCharMap, CLI::ignore_case));\r\n        ");
            
            #line 244 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.StringType) { 
            
            #line default
            #line hidden
            this.Write("    // Option for Q# String type.\r\n    string ");
            
            #line 246 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n    app.add_option(\"--");
            
            #line 247 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 247 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"A String value\")->required();\r\n        ");
            
            #line 248 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ArrayType && arg.Type == DataType.StringType) { 
            
            #line default
            #line hidden
            this.Write("    // Option for a Q# Array<String> type.\r\n    vector<string> ");
            
            #line 250 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n    app.add_option(\"--");
            
            #line 251 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 251 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write(", \"A String array\")->required();\r\n        ");
            
            #line 252 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 253 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n    // With all the options added, parse arguments from the command line.\r\n  " +
                    "  CLI11_PARSE(app, argc, argv);\r\n\r\n    // Translate values to its final form aft" +
                    "er parsing.\r\n    // Create an interop array of integer values.\r\n    unique_ptr<I" +
                    "nteropArray> integerArray = CreateInteropArray(integerVector);\r\n\r\n    // Create " +
                    "an interop array of double values.\r\n    unique_ptr<InteropArray> doubleArray = C" +
                    "reateInteropArray(doubleVector);\r\n\r\n    // Create an interop array of bool value" +
                    "s.\r\n    unique_ptr<InteropArray> boolArray = CreateInteropArray(boolAsCharVector" +
                    ");\r\n\r\n    // Translate a PauliID value to its char representation.\r\n    char pau" +
                    "liAsCharValue = TranslatePauliToChar(pauliValue);\r\n\r\n    // Create an interop ar" +
                    "ray of Pauli values represented as chars.\r\n    vector<char> pauliAsCharVector;\r\n" +
                    "    TranslateVector<PauliId, char>(pauliVector, pauliAsCharVector, TranslatePaul" +
                    "iToChar);\r\n    unique_ptr<InteropArray> pauliArray = CreateInteropArray(pauliAsC" +
                    "harVector);\r\n\r\n    // Create an interop range.\r\n    unique_ptr<InteropRange> ran" +
                    "geValue = CreateInteropRange(rangeTuple);\r\n    vector<InteropRange*> rangeVector" +
                    ";\r\n    TranslateVector<RangeTuple, InteropRange*>(rangeTupleVector, rangeVector," +
                    " TranslateRangeTupleToInteropRangePointer);\r\n    unique_ptr<InteropArray> rangeA" +
                    "rray = CreateInteropArray(rangeVector);\r\n\r\n    // Create an interop array of Res" +
                    "ult values.\r\n    unique_ptr<InteropArray> resultArray = CreateInteropArray(resul" +
                    "tAsCharVector);\r\n\r\n    // Create an interop array of String values.\r\n    vector<" +
                    "const char *> stringBufferVector;\r\n    TranslateVector<string, const char*>(stri" +
                    "ngVector, stringBufferVector, TranslateStringToCharBuffer);\r\n    unique_ptr<Inte" +
                    "ropArray> stringArray = CreateInteropArray(stringBufferVector);\r\n\r\n    // Redire" +
                    "ct the simulator output from std::cout if the --simulation-output option is pres" +
                    "ent.\r\n    ostream* simulatorOutputStream = &cout;\r\n    ofstream simulationOutput" +
                    "FileStream;\r\n    if (!simulationOutputFileOpt->empty())\r\n    {\r\n        simulati" +
                    "onOutputFileStream.open(simulationOutputFile);\r\n        SetOutputStream(simulati" +
                    "onOutputFileStream);\r\n        simulatorOutputStream = &simulationOutputFileStrea" +
                    "m;\r\n    }\r\n\r\n    // Run simulation and write the output of the operation to the " +
                    "corresponding stream.\r\n    Quantum__StandaloneSupportedInputs__ExerciseInputs(\r\n" +
                    "        intValue,\r\n        integerArray.get(),\r\n        doubleValue,\r\n        do" +
                    "ubleArray.get(),\r\n        boolAsCharValue,\r\n        boolArray.get(),\r\n        pa" +
                    "uliAsCharValue,\r\n        pauliArray.get(),\r\n        rangeValue.get(),\r\n        r" +
                    "esultAsCharValue,\r\n        resultArray.get(),\r\n        stringValue.c_str());\r\n\r\n" +
                    "    FreePointerVector(rangeVector);\r\n    simulatorOutputStream->flush();\r\n    if" +
                    " (simulationOutputFileStream.is_open())\r\n    {\r\n        simulationOutputFileStre" +
                    "am.close();\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class QirDriverCppBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
