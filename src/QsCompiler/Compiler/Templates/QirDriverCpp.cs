// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.Quantum.QsCompiler.Templates
{
    using Microsoft.Quantum.QsCompiler.BondSchemas.EntryPoint;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class QirDriverCpp : QirDriverCppBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//------------------------------------------------------------------------------
// This code was generated by a tool.
// <auto-generated />
//------------------------------------------------------------------------------

// N.B. This is currently just a base non-functional example of a template used
//      to generate C++ code that works as an entry-point driver for a QIR-based
//      executable.

extern ""C"" void ");
            
            #line 12 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entryPointOperation.Name));
            
            #line default
            #line hidden
            this.Write(@"(); // NOLINT

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

#include <cstring> // for memcpy
#include <fstream>
#include <iostream>
#include <map>
#include <memory>
#include <vector>

#include ""CLI11.hpp""

#include ""CoreTypes.hpp""
#include ""QirContext.hpp""
#include ""QirTypes.hpp""
#include ""QuantumApi_I.hpp""
#include ""SimFactory.hpp""

#include ""quantum__qis_internal.hpp""
#include ""quantum__rt.hpp""

using namespace Microsoft::Quantum;
using namespace std;

// This is the function corresponding to the QIR entry-point.
extern ""C"" int64_t Quantum__StandaloneSupportedInputs__ExerciseInputs__body( // NOLINT
    int64_t intValue,
    double doubleValue,
    Result resultValue,
    QirString* stringValue);

extern ""C"" void ");
            
            #line 45 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entryPointOperation.Name));
            
            #line default
            #line hidden
            this.Write("(\r\n    ");
            
            #line 46 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 foreach (var arg in entryPointOperation.Arguments) { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 47 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 if (arg.Type == DataType.IntegerType) { 
            
            #line default
            #line hidden
            this.Write("    int64_t intValue,\r\n        ");
            
            #line 49 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.DoubleType) { 
            
            #line default
            #line hidden
            this.Write("    double doubleValue,\r\n        ");
            
            #line 51 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ResultType) { 
            
            #line default
            #line hidden
            this.Write("    Result resultValue,\r\n        ");
            
            #line 53 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.StringType) { 
            
            #line default
            #line hidden
            this.Write("    QirString* stringValue\r\n        ");
            
            #line 55 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 56 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write(");\r\n\r\nconst char FalseAsChar = 0x0;\r\nconst char TrueAsChar = 0x1;\r\nmap<string, bo" +
                    "ol> BoolAsCharMap{\r\n    {\"0\", FalseAsChar},\r\n    {\"false\", FalseAsChar},\r\n    {\"" +
                    "1\", TrueAsChar},\r\n    {\"true\", TrueAsChar}};\r\n\r\nmap<string, PauliId> PauliMap{\r\n" +
                    "    {\"PauliI\", PauliId::PauliId_I},\r\n    {\"PauliX\", PauliId::PauliId_X},\r\n    {\"" +
                    "PauliY\", PauliId::PauliId_Y},\r\n    {\"PauliZ\", PauliId::PauliId_Z}};\r\n\r\nmap<strin" +
                    "g, char> ResultAsCharMap{\r\n    {\"0\", FalseAsChar},\r\n    {\"Zero\", FalseAsChar},\r\n" +
                    "    {\"false\", FalseAsChar},\r\n    {\"1\", TrueAsChar},\r\n    {\"One\", TrueAsChar},\r\n " +
                    "   {\"true\", TrueAsChar}};\r\n\r\ntemplate<typename T>\r\nQirArray* CreateQirArray(T* d" +
                    "ataBuffer, int64_t itemCount)\r\n{\r\n    int32_t typeSize = sizeof(T); // NOLINT\r\n " +
                    "   QirArray* qirArray = quantum__rt__array_create_1d(typeSize, itemCount);\r\n    " +
                    "memcpy(qirArray->buffer, dataBuffer, typeSize * itemCount);\r\n    return qirArray" +
                    ";\r\n}\r\n\r\ntemplate<typename D, typename S>\r\nunique_ptr<D[]> TranslateVectorToBuffe" +
                    "r(vector<S>sourceVector, function<D(S)> translationFunction)\r\n{\r\n    unique_ptr<" +
                    "D[]> buffer (new D[sourceVector.size()]);\r\n    for (int index = 0; index < sourc" +
                    "eVector.size(); index++)\r\n    {\r\n        buffer[index] = translationFunction(sou" +
                    "rceVector[index]);\r\n    }\r\n\r\n    return buffer;\r\n}\r\n\r\nusing RangeTuple = tuple<i" +
                    "nt64_t, int64_t, int64_t>;\r\nQirRange TranslateRangeTupleToQirRange(RangeTuple ra" +
                    "ngeTuple)\r\n{\r\n    QirRange qirRange = {\r\n        get<0>(rangeTuple), // Start\r\n " +
                    "       get<1>(rangeTuple), // Step\r\n        get<2>(rangeTuple)  // End\r\n    };\r\n" +
                    "\r\n    return qirRange;\r\n}\r\n\r\nbool TranslateCharToBool(char boolAsChar)\r\n{\r\n    r" +
                    "eturn (boolAsChar != FalseAsChar);\r\n}\r\n\r\n// Result Zero and One are opaque types" +
                    " defined by the runtime. They are declared here and initialized before executing" +
                    "\r\n// the simulation.\r\nResult RuntimeResultZero = nullptr;\r\nResult RuntimeResultO" +
                    "ne = nullptr;\r\nResult TranslateCharToResult(char resultAsChar)\r\n{\r\n    return re" +
                    "sultAsChar == FalseAsChar ? RuntimeResultZero : RuntimeResultOne;\r\n}\r\n\r\nint main" +
                    "(int argc, char* argv[])\r\n{\r\n    CLI::App app(\"QIR Standalone Entry Point Inputs" +
                    " Reference\");\r\n\r\n    // Initialize simulator.\r\n    unique_ptr<ISimulator> sim = " +
                    "CreateFullstateSimulator();\r\n    QirContextScope qirctx(sim.get(), false /*track" +
                    "AllocatedObjects*/);\r\n    RuntimeResultZero = sim->UseZero();\r\n    RuntimeResult" +
                    "One = sim->UseOne();\r\n\r\n    // Add the --simulation-output and --operation-outpu" +
                    "t options.\r\n    // N.B. These options should be present in all standalone driver" +
                    "s.\r\n    string simulationOutputFile;\r\n    CLI::Option* simulationOutputFileOpt =" +
                    " app.add_option(\r\n        \"-s,--simulation-output\", simulationOutputFile,\r\n     " +
                    "   \"File where the output produced during the simulation is written\");\r\n\r\n    st" +
                    "ring operationOutputFile;\r\n    CLI::Option* operationOutputFileOpt = app.add_opt" +
                    "ion(\r\n        \"-o,--operation-output\", operationOutputFile, \"File where the outp" +
                    "ut of the Q# operation is written\");\r\n\r\n        ");
            
            #line 149 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 foreach (var arg in entryPointOperation.Arguments) { 
            
            #line default
            #line hidden
            this.Write("            hey what do you know ");
            
            #line 150 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\r\n        ");
            
            #line 151 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n    ");
            
            #line 153 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 foreach (var arg in entryPointOperation.Arguments) { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 154 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 if (arg.Type == DataType.BoolType) { 
            
            #line default
            #line hidden
            this.Write("\r\n    // Option for a Q# Bool type.\r\n    bool boolValue = false;\r\n    app.add_opt" +
                    "ion(\"--");
            
            #line 158 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", boolValue, \"A bool value\")->required();\r\n\r\n        ");
            
            #line 160 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.IntegerType) { 
            
            #line default
            #line hidden
            this.Write("\r\n    // Add the options that correspond to the parameters that the QIR entry-poi" +
                    "nt needs.\r\n    // Option for a Q# Int type.\r\n    int64_t intValue = 0;\r\n    app." +
                    "add_option(\"--");
            
            #line 165 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", intValue, \"An integer value\")->required();\r\n\r\n        ");
            
            #line 167 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.DoubleType) { 
            
            #line default
            #line hidden
            this.Write("\r\n    // Option for a Q# Double type.\r\n    double_t doubleValue = 0.0;\r\n    app.a" +
                    "dd_option(\"--");
            
            #line 171 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", doubleValue, \"A double value\")->required();\r\n\r\n        ");
            
            #line 173 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.PauliType) { 
            
            #line default
            #line hidden
            this.Write("\r\n    // Option for Q# Pauli type.\r\n    PauliId pauliValue = PauliId::PauliId_I;\r" +
                    "\n    app.add_option(\"--");
            
            #line 177 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", pauliValue, \"A Pauli value\")\r\n        ->required()\r\n        ->transform(CLI::C" +
                    "heckedTransformer(PauliMap, CLI::ignore_case));\r\n\r\n        ");
            
            #line 181 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.RangeType) { 
            
            #line default
            #line hidden
            this.Write(@"
    // Option for Q# Range type.
    // N.B. RangeTuple type is used here instead of QirRange because CLI11 supports tuple parsing which is leveraged and
    //      the tuple is later translated to QirRange.
    RangeTuple rangeValue(0, 0, 0);
    app.add_option(""--");
            
            #line 187 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", rangeValue, \"A Range value (start, step, end)\")->required();\r\n\r\n        ");
            
            #line 189 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.ResultType) { 
            
            #line default
            #line hidden
            this.Write(@"
    // Option for Q# Result type.
    // N.B. This is implemented as a char rather than a boolean to be consistent with the way an array of results has to
    //      be implemented.
    char resultAsCharValue = FalseAsChar;
    app.add_option(""--result-value"", resultAsCharValue, ""A Result value"")
        ->required()
        ->transform(CLI::CheckedTransformer(ResultAsCharMap, CLI::ignore_case));

        ");
            
            #line 199 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } else if (arg.Type == DataType.StringType) { 
            
            #line default
            #line hidden
            this.Write("\r\n    // Option for Q# String type.\r\n    string stringValue;\r\n    app.add_option(" +
                    "\"--");
            
            #line 203 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            
            #line default
            #line hidden
            this.Write("\", stringValue, \"A String value\")->required();\r\n    \r\n        ");
            
            #line 205 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 206 "C:\Users\sabannin\source\repos\qsharp-compiler\src\QsCompiler\Compiler\Templates\QirDriverCpp.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n    // Add the options that correspond to the parameters that the QIR entry-poi" +
                    "nt needs.\r\n    // Option for a Q# Int type.\r\n    int64_t intValue = 0;\r\n    app." +
                    "add_option(\"--int-value\", intValue, \"An integer value\")->required();\r\n\r\n    // O" +
                    "ption for a Q# Array<Int> type.\r\n    vector<int64_t> integerVector;\r\n    app.add" +
                    "_option(\"--integer-array\", integerVector, \"An integer array\")->required();\r\n\r\n  " +
                    "  // Option for a Q# Double type.\r\n    double_t doubleValue = 0.0;\r\n    app.add_" +
                    "option(\"--double-value\", doubleValue, \"A double value\")->required();\r\n\r\n    // O" +
                    "ption for a Q# Array<Double> type.\r\n    vector<double_t> doubleVector;\r\n    app." +
                    "add_option(\"--double-array\", doubleVector, \"A double array\")->required();\r\n\r\n   " +
                    " // Option for a Q# Bool type.\r\n    bool boolValue = false;\r\n    app.add_option(" +
                    "\"--bool-value\", boolValue, \"A bool value\")->required();\r\n\r\n    // Option for a Q" +
                    "# Array<Bool> type.\r\n    // N.B. For command line parsing, a char vector is used" +
                    " because vector<bool> is a specialized version of vector not\r\n    //      suppor" +
                    "ted by CLI11.\r\n    vector<char> boolAsCharVector;\r\n    app.add_option(\"--bool-ar" +
                    "ray\", boolAsCharVector, \"A bool array\")\r\n        ->required()\r\n        ->transfo" +
                    "rm(CLI::CheckedTransformer(BoolAsCharMap, CLI::ignore_case));\r\n\r\n    // Option f" +
                    "or Q# Pauli type.\r\n    PauliId pauliValue = PauliId::PauliId_I;\r\n    app.add_opt" +
                    "ion(\"--pauli-value\", pauliValue, \"A Pauli value\")\r\n        ->required()\r\n       " +
                    " ->transform(CLI::CheckedTransformer(PauliMap, CLI::ignore_case));\r\n\r\n    // Opt" +
                    "ion for a Q# Array<Pauli> type.\r\n    std::vector<PauliId> pauliVector;\r\n    app." +
                    "add_option(\"--pauli-array\", pauliVector, \"A Pauli array\")\r\n        ->required()\r" +
                    "\n        ->transform(CLI::CheckedTransformer(PauliMap, CLI::ignore_case));\r\n\r\n  " +
                    "  // Option for Q# Range type.\r\n    // N.B. RangeTuple type is used here instead" +
                    " of QirRange because CLI11 supports tuple parsing which is leveraged and\r\n    //" +
                    "      the tuple is later translated to QirRange.\r\n    RangeTuple rangeValue(0, 0" +
                    ", 0);\r\n    app.add_option(\"--range-value\", rangeValue, \"A Range value (start, st" +
                    "ep, end)\")->required();\r\n\r\n    // Option for a Q# Array<Range> type.\r\n    vector" +
                    "<RangeTuple> rangeTupleVector;\r\n    app.add_option(\"--range-array\", rangeTupleVe" +
                    "ctor, \"A Range array\")->required();\r\n\r\n    // Option for Q# Result type.\r\n    //" +
                    " N.B. This is implemented as a char rather than a boolean to be consistent with " +
                    "the way an array of results has to\r\n    //      be implemented.\r\n    char result" +
                    "AsCharValue = FalseAsChar;\r\n    app.add_option(\"--result-value\", resultAsCharVal" +
                    "ue, \"A Result value\")\r\n        ->required()\r\n        ->transform(CLI::CheckedTra" +
                    "nsformer(ResultAsCharMap, CLI::ignore_case));\r\n\r\n    // Option for a Q# Array<Re" +
                    "sult> type.\r\n    // N.B. Similarly to the case of Q# Array<bool>, for command li" +
                    "ne parsing, a char vector is used because CLI11 does\r\n    //      not support ve" +
                    "ctor<bool> since it is a specialized version of vector.\r\n    vector<char> result" +
                    "AsCharVector;\r\n    app.add_option(\"--result-array\", resultAsCharVector, \"A Resul" +
                    "t array\")\r\n        ->required()\r\n        ->transform(CLI::CheckedTransformer(Res" +
                    "ultAsCharMap, CLI::ignore_case));\r\n\r\n    // Option for Q# String type.\r\n    stri" +
                    "ng stringValue;\r\n    app.add_option(\"--string-value\", stringValue, \"A String val" +
                    "ue\")->required();\r\n\r\n    // With all the options added, parse arguments from the" +
                    " command line.\r\n    CLI11_PARSE(app, argc, argv);\r\n\r\n    // Translate values to " +
                    "its final form after parsing.\r\n    // Create a QirArray of integer values.\r\n    " +
                    "QirArray* qirIntegerArray = CreateQirArray(integerVector.data(), integerVector.s" +
                    "ize());\r\n\r\n    // Create a QirArray of double values.\r\n    QirArray* qirDoubleAr" +
                    "ray = CreateQirArray(doubleVector.data(), doubleVector.size());\r\n\r\n    // Create" +
                    " a QirArray of bool values.\r\n    unique_ptr<bool[]> boolArray = TranslateVectorT" +
                    "oBuffer<bool, char>(boolAsCharVector, TranslateCharToBool);\r\n    QirArray* qirbo" +
                    "olArray = CreateQirArray(boolArray.get(), boolAsCharVector.size());\r\n\r\n    // Cr" +
                    "eate a QirArray of Pauli values.\r\n    QirArray* qirPauliArray = CreateQirArray(p" +
                    "auliVector.data(), pauliVector.size());\r\n\r\n    // Create a QirRange.\r\n    QirRan" +
                    "ge qirRange = TranslateRangeTupleToQirRange(rangeValue);\r\n\r\n    // Create a QirA" +
                    "rray of Range values.\r\n    unique_ptr<QirRange[]> rangeArray = TranslateVectorTo" +
                    "Buffer<QirRange, RangeTuple>(\r\n        rangeTupleVector, TranslateRangeTupleToQi" +
                    "rRange);\r\n\r\n    QirArray* qirRangeArray = CreateQirArray(rangeArray.get(), range" +
                    "TupleVector.size());\r\n\r\n    // Create a Result.\r\n    Result result = TranslateCh" +
                    "arToResult(resultAsCharValue);\r\n\r\n    // Create a QirArray of Result values.\r\n  " +
                    "  unique_ptr<Result[]> resultArray = TranslateVectorToBuffer<Result, char>(resul" +
                    "tAsCharVector, TranslateCharToResult);\r\n    QirArray* qirResultArray = CreateQir" +
                    "Array(resultArray.get(), resultAsCharVector.size());\r\n\r\n    // Create a QirStrin" +
                    "g.\r\n    QirString* qirString = quantum__rt__string_create(stringValue.c_str());\r" +
                    "\n\r\n    // Redirect the simulator output from std::cout if the --simulator-output" +
                    " option is present.\r\n    ostream* simulatorOutputStream = &cout;\r\n    ofstream s" +
                    "imulationOutputFileStream;\r\n    if (!simulationOutputFileOpt->empty())\r\n    {\r\n " +
                    "       simulationOutputFileStream.open(simulationOutputFile);\r\n        Quantum::" +
                    "Qis::Internal::SetOutputStream(simulationOutputFileStream);\r\n        simulatorOu" +
                    "tputStream = &simulationOutputFileStream;\r\n    }\r\n\r\n    // Redirect the Q# opera" +
                    "tion output from std::cout if the --operation-output option is present.\r\n    ost" +
                    "ream* operationOutputStream = &cout;\r\n    ofstream operationOutputFileStream;\r\n " +
                    "   if (!operationOutputFileOpt->empty())\r\n    {\r\n        operationOutputFileStre" +
                    "am.open(operationOutputFile);\r\n        operationOutputStream = &operationOutputF" +
                    "ileStream;\r\n    }\r\n\r\n    // Run simulation and write the output of the operation" +
                    " to the corresponding stream.\r\n    int64_t operationOutput = Quantum__Standalone" +
                    "SupportedInputs__ExerciseInputs__body(\r\n        intValue, doubleValue, result, q" +
                    "irString);\r\n\r\n    simulatorOutputStream->flush();\r\n    (*operationOutputStream) " +
                    "<< operationOutput << endl;\r\n    operationOutputStream->flush();\r\n\r\n    // Close" +
                    " opened file buffers;\r\n    if (operationOutputFileStream.is_open())\r\n    {\r\n    " +
                    "    operationOutputFileStream.close();\r\n    }\r\n\r\n    if (simulationOutputFileStr" +
                    "eam.is_open())\r\n    {\r\n        simulationOutputFileStream.close();\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class QirDriverCppBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
