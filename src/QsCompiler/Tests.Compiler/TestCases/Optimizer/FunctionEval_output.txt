namespace Microsoft.Quantum.Testing.Optimization.FunctionEval {
    Function ArcSinh (x) : Double {
        QsBody Intrinsic
    }

    Function f (x, w) : Int {
        QsBody (x, w) {
            mutable y = 1;
            mutable z = [0, 0, 0, 0, 0];
            set LocalVariable z = (LocalVariable z w/= 0 <- LocalVariable x);
            while (LocalVariable z[0] > 0) {
                set LocalVariable y = (LocalVariable y + LocalVariable w);
                set LocalVariable z = (LocalVariable z w/= 0 <- (LocalVariable z[0] / 2));
            }
            mutable b = 0;
            for a in LocalVariable z {
                set LocalVariable b = (LocalVariable b + LocalVariable a);
            }
            return (LocalVariable y + LocalVariable b);
        }
    }

    Function g1 (x) : Int {
        QsBody (x) {
            if (LocalVariable x = 0) {
                return 0;
            }
            if (LocalVariable x = 1) {
                return 1;
            }
            return ((GlobalCallable g1 of (LocalVariable x - 1)) + (GlobalCallable g1 of (LocalVariable x - 2)));
        }
    }

    Function g2 (x) : Int {
        QsBody (x) {
            return ((LocalVariable x = 0) ? 0 | ((LocalVariable x = 1) ? 1 | ((GlobalCallable g2 of (LocalVariable x - 1)) + (GlobalCallable g2 of (LocalVariable x - 2)))));
        }
    }

    Function mySin (x) : Double {
        QsBody (x) {
            let y = (GlobalCallable ArcSinh of LocalVariable x);
            if (LocalVariable y = 0.000000) {
                return 2.000000;
            }
            return (GlobalCallable ArcSinh of LocalVariable y);
        }
    }

    Operation Test () : (Int, Int, Int, Int, Double) {
        QsBody () {
            let s = (GlobalCallable mySin of 2.000000);
            return (9, 2, 3, 5, LocalVariable s);
        }
    }
}