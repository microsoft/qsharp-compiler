namespace Microsoft.Quantum.Testing.Optimization.FunctionEval {
    
    function ArcSinh (x : Double) : Double {
        body intrinsic;
    }
    
    
    function f (x : Int, w : Int) : Int {
        
        mutable y = 1;
        mutable z = [0, 0, 0, 0, 0];
        set z = z w/ 0 <- x;
        
        while (z[0] > 0) {
            set y = y + w;
            set z = z w/ 0 <- z[0] / 2;
        }
        
        mutable b = 0;
        
        for (a in z) {
            set b = b + a;
        }
        
        return y + b;
    }
    
    
    function g1 (x : Int) : Int {
        
        if (x == 0) {
            return 0;
        }
        
        if (x == 1) {
            return 1;
        }
        
        return g1(x - 1) + g1(x - 2);
    }
    
    
    function g2 (x : Int) : Int {
        
        return x == 0 ? 0 | (x == 1 ? 1 | g2(x - 1) + g2(x - 2));
    }
    
    
    function mySin (x : Double) : Double {
        
        let y = ArcSinh(x);
        
        if (y == 0.0) {
            return 2.0;
        }
        
        return ArcSinh(y);
    }
    
    
    operation Test () : (Int, Int, Int, Int, Double) {
        
        let b = 9 + g1(100);
        let s = mySin(2.0);
        return (b, 2, 3, 5, s);
    }
    
}