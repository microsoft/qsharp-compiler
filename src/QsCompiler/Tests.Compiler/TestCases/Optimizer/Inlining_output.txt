namespace Microsoft.Quantum.Testing.Optimization.Inlining {
    Function X (q) : UnitType {
        QsBody Intrinsic
    }

    Function f (q, x) : UnitType {
        QsBody (q, x) {
            if (LocalVariable x = IntLiteral 0L) { EmptyScope } elif (LocalVariable x = IntLiteral 1L) {
                (GlobalCallable X of LocalVariable q);
            } else {
                {
                    let (q, x) = (LocalVariable x - IntLiteral 1L);
                    if (LocalVariable x = IntLiteral 0L) { EmptyScope } elif (LocalVariable x = IntLiteral 1L) {
                        (GlobalCallable X of LocalVariable q);
                    } else {
                        (GlobalCallable f of (LocalVariable x - IntLiteral 1L));
                        (GlobalCallable f of (LocalVariable x - IntLiteral 2L));
                    }
                }
                {
                    let (q, x) = (LocalVariable x - IntLiteral 2L);
                    if (LocalVariable x = IntLiteral 0L) { EmptyScope } elif (LocalVariable x = IntLiteral 1L) {
                        (GlobalCallable X of LocalVariable q);
                    } else {
                        (GlobalCallable f of (LocalVariable x - IntLiteral 1L));
                        (GlobalCallable f of (LocalVariable x - IntLiteral 2L));
                    }
                }
            }
        }
    }

    Operation Test () : UnitType {
        QsBody () {
            {
                let (q, x) = IntLiteral 5L;
                if (LocalVariable x = IntLiteral 0L) { EmptyScope } elif (LocalVariable x = IntLiteral 1L) {
                    (GlobalCallable X of LocalVariable q);
                } else {
                    (GlobalCallable f of (LocalVariable x - IntLiteral 1L));
                    (GlobalCallable f of (LocalVariable x - IntLiteral 2L));
                }
            }
        }
    }
}