namespace Microsoft.Quantum.Testing {
    
    newtype BigEndianRegister = (Qubit[]);
    
    newtype OtherTuple = (OtherType, Int);
    
    newtype OtherType = (Int, Qubit[]);
    
    newtype QubitAlias = (Qubit);
    
    
    // First comment
    operation CNOT (q1 : Qubit, q2 : Qubit) : Unit
    is Ctl + Adj {
        body intrinsic;
        adjoint self;
    }
    
    
    operation M (q : Qubit) : Result {
        body intrinsic;
    }
    
    
    operation op0 (q : Qubit) : Result {
        
        return One;
    }
    
    
    operation op1 (q1 : Qubit, r1 : BigEndianRegister) : Unit
    is Ctl + Adj {
        adjoint self;
        
        body (...) {
            Adjoint CNOT(q1, (r1!)[0]);
            
            for (item in r1!) {
                CNOT(q1, item);
                CNOT(q1, item);
                CNOT(q1, item);
            }
        }
        
        ///automatically generated QsControlled specialization for Microsoft.Quantum.Testing.op1
        controlled (__controlQubits__, ...) {
            Controlled (Adjoint CNOT)(__controlQubits__, (q1, (r1!)[0]));
            
            for (item in r1!) {
                Controlled CNOT(__controlQubits__, (q1, item));
                Controlled CNOT(__controlQubits__, (q1, item));
                Controlled CNOT(__controlQubits__, (q1, item));
            }
        }
    }
    
    
    operation op2 (q2 : Qubit, n2 : Int, b2 : BigEndianRegister, q : QubitAlias) : Unit
    is Adj + Ctl {
        
        body (...) {
            Adjoint CNOT(q2, (b2!)[0]);
            
            for (item in b2!) {
                CNOT(q2, item);
                CNOT(q2, item);
                CNOT(q2, item);
            }
            
            let r = M(q2);
            
            if (r == One) {
                Adjoint CNOT(q!, (b2!)[0]);
                
                for (__qsVar1__item__ in b2!) {
                    CNOT(q!, __qsVar1__item__);
                    CNOT(q!, __qsVar1__item__);
                    CNOT(q!, __qsVar1__item__);
                }
                
                Adjoint CNOT(q!, (b2!)[0]);
                
                for (__qsVar2__item__ in b2!) {
                    CNOT(q!, __qsVar2__item__);
                    CNOT(q!, __qsVar2__item__);
                    CNOT(q!, __qsVar2__item__);
                }
                
                Adjoint CNOT(q!, (b2!)[0]);
                
                for (__qsVar3__item__ in b2!) {
                    CNOT(q!, __qsVar3__item__);
                    CNOT(q!, __qsVar3__item__);
                    CNOT(q!, __qsVar3__item__);
                }
            }
            else {
                fail "r is supposed to be Zero";
            }
        }
        
        adjoint (...) {
            Adjoint CNOT(q!, (b2!)[0]);
            
            for (item in b2!) {
                CNOT(q!, item);
                CNOT(q!, item);
                CNOT(q!, item);
            }
            
            Adjoint CNOT(q!, (b2!)[0]);
            
            for (__qsVar1__item__ in b2!) {
                CNOT(q!, __qsVar1__item__);
                CNOT(q!, __qsVar1__item__);
                CNOT(q!, __qsVar1__item__);
            }
            
            Adjoint CNOT(q!, (b2!)[0]);
            
            for (__qsVar2__item__ in b2!) {
                CNOT(q!, __qsVar2__item__);
                CNOT(q!, __qsVar2__item__);
                CNOT(q!, __qsVar2__item__);
            }
            
            Adjoint CNOT(q!, (b2!)[0]);
            
            for (__qsVar3__item__ in b2!) {
                CNOT(q!, __qsVar3__item__);
                CNOT(q!, __qsVar3__item__);
                CNOT(q!, __qsVar3__item__);
            }
            
            Adjoint CNOT(q!, (b2!)[0]);
            
            for (__qsVar4__item__ in b2!) {
                CNOT(q!, __qsVar4__item__);
                CNOT(q!, __qsVar4__item__);
                CNOT(q!, __qsVar4__item__);
            }
            
            Adjoint CNOT(q!, (b2!)[0]);
            
            for (__qsVar5__item__ in b2!) {
                CNOT(q!, __qsVar5__item__);
                CNOT(q!, __qsVar5__item__);
                CNOT(q!, __qsVar5__item__);
            }
            
            Adjoint CNOT(q2, (b2!)[0]);
            
            for (__qsVar6__item__ in b2!) {
                CNOT(q2, __qsVar6__item__);
                CNOT(q2, __qsVar6__item__);
                CNOT(q2, __qsVar6__item__);
            }
        }
        
        controlled (ctrls, ...) {
            Controlled (Adjoint CNOT)(ctrls, (q2, (b2!)[0]));
            
            for (item in b2!) {
                Controlled CNOT(ctrls, (q2, item));
                Controlled CNOT(ctrls, (q2, item));
                Controlled CNOT(ctrls, (q2, item));
            }
            
            let r = M(q2);
            
            if (r == One) {
                Controlled (Adjoint CNOT)(ctrls, (q!, (b2!)[0]));
                
                for (__qsVar1__item__ in b2!) {
                    Controlled CNOT(ctrls, (q!, __qsVar1__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar1__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar1__item__));
                }
                
                Controlled (Adjoint CNOT)(ctrls, (q!, (b2!)[0]));
                
                for (__qsVar2__item__ in b2!) {
                    Controlled CNOT(ctrls, (q!, __qsVar2__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar2__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar2__item__));
                }
                
                Controlled (Adjoint CNOT)(ctrls, (q!, (b2!)[0]));
                
                for (__qsVar3__item__ in b2!) {
                    Controlled CNOT(ctrls, (q!, __qsVar3__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar3__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar3__item__));
                }
                
                Controlled (Adjoint CNOT)(ctrls, (q!, (b2!)[0]));
                
                for (__qsVar4__item__ in b2!) {
                    Controlled CNOT(ctrls, (q!, __qsVar4__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar4__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar4__item__));
                }
                
                Controlled (Adjoint CNOT)(ctrls, (q!, (b2!)[0]));
                
                for (__qsVar5__item__ in b2!) {
                    Controlled CNOT(ctrls, (q!, __qsVar5__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar5__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar5__item__));
                }
                
                Controlled (Adjoint CNOT)(ctrls, (q!, (b2!)[0]));
                
                for (__qsVar6__item__ in b2!) {
                    Controlled CNOT(ctrls, (q!, __qsVar6__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar6__item__));
                    Controlled CNOT(ctrls, (q!, __qsVar6__item__));
                }
            }
        }
        
        controlled adjoint (ctrls, ...) {
            Controlled (Adjoint CNOT)(ctrls, (q2, (b2!)[0]));
            
            for (item in b2!) {
                Controlled CNOT(ctrls, (q2, item));
                Controlled CNOT(ctrls, (q2, item));
                Controlled CNOT(ctrls, (q2, item));
            }
        }
    }
    
    
    function pickM (p : Pauli, d : Double) : (Qubit => Result) {
        
        let twice = d * 2.0;
        
        if (twice > 1.0) {
            
            if (p == PauliZ) {
                return op0;
            }
        }
        
        return M;
    }
    
    
    operation Test () : Unit {
        
        using ((q1, q2, __qsItem1__qs__, __qsItem2__qs__, __qsItem3__qs__, __qsItem4__qs__) = (Qubit(), Qubit(), Qubit(), Qubit(), Qubit(), Qubit())) {
            CNOT(q1, __qsItem1__qs__);
            CNOT(q1, __qsItem2__qs__);
            CNOT(q1, __qsItem3__qs__);
            CNOT(q1, __qsItem4__qs__);
            let r = M(q1);
            
            if (r == One) {
                CNOT(q2, __qsItem1__qs__);
                CNOT(q2, __qsItem2__qs__);
                CNOT(q2, __qsItem3__qs__);
                CNOT(q2, __qsItem4__qs__);
                CNOT(q2, __qsItem1__qs__);
                CNOT(q2, __qsItem2__qs__);
                CNOT(q2, __qsItem3__qs__);
                CNOT(q2, __qsItem4__qs__);
                CNOT(q2, __qsItem1__qs__);
                CNOT(q2, __qsItem2__qs__);
                CNOT(q2, __qsItem3__qs__);
                CNOT(q2, __qsItem4__qs__);
            }
            else {
                fail "r is supposed to be Zero";
            }
        }
    }
    
}