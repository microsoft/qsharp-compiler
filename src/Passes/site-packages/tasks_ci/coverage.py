# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

import logging
import subprocess
import re
import os
from . import toolchain
from typing import Union
logger = logging.getLogger("Coverage")

TEST_PATTERN = r"\d+: Test command: (?P<path>[\w/-]+)( \"\w+\")?"


def find_test_executables(build_dir):
    """
    Finds executable tests in the build dir.
    """
    ret = []
    output = subprocess.check_output(
        [toolchain.discover_ctest(), "-N", "--debug"], cwd=build_dir).decode("utf-8")

    for match in re.finditer(TEST_PATTERN, output):
        ret.append(match.group("path"))

    return ret


def main(build_dir: str,
         output_dir: Union[str, None] = None, output_format="html"):
    """
    Builds and generates coverage reports.
    """
    test_executables = find_test_executables(build_dir)

    verbose = True

    if output_dir is None:
        output_dir = os.path.abspath(os.path.join(build_dir, "CoverageReport"))
        try:
            os.mkdir(output_dir)
        except:  # noqa: E722
            pass

    # Generating individual reports
    all_profiles = []
    all_binaries = []
    for exe in test_executables:
        try:
            if verbose:
                cmd = "{} 1>&2".format(exe)
                subprocess.check_output(cmd, cwd=build_dir, shell=True)
            else:
                cmd = "{} 2>&1 1> /dev/null".format(exe)
                subprocess.check_output(cmd, cwd=build_dir, shell=True)
        except:  # noqa: E722
            logger.error("Failed to run test: {}".format(exe))
            return

        # File names
        logger.info("Generating coverage report for {}".format(
            os.path.basename(exe)))
        binary = os.path.join("Source", os.path.basename(exe))
        profile_file = "{}.profraw".format(exe)
        index_file = "{}.index".format(exe)
        current_output_dir = os.path.join(output_dir, os.path.basename(exe))

        # Moving the file for the target
        src = os.path.join(build_dir, "default.profraw")
        dest = os.path.join(build_dir, profile_file)
        os.rename(src, dest)

        # Generating index
        try:
            cmd1 = [toolchain.discover_profdata(), "merge", "-sparse",
                    profile_file, "-o", index_file]
            subprocess.check_output(cmd1, cwd=build_dir)

            all_profiles.append(profile_file)
        except:  # noqa: E722
            logger.error("Failed to generate index for: ", exe)
            continue

        # Generating report
        try:
            cmd2 = [toolchain.discover_llvm_cov(), "show",
                    "-ignore-filename-regex=\".*(vendors|llvm|Tests).*\"",
                    "-Xdemangler", "c++filt", binary,
                    "-instr-profile=" +
                    index_file, "-format={}".format(output_format), "-o",
                    current_output_dir]
            subprocess.check_output(" ".join(cmd2), cwd=build_dir, shell=True)
            logger.info("Report saved in {}".format(current_output_dir))

            all_binaries.append("-object")
            all_binaries.append(binary)
        except:  # noqa: E722
            logger.error("Failed to create report for: ", exe)
            continue

    # Creating combined report
    current_output_dir = os.path.join(output_dir, "Summary")
    summary_index_file = os.path.abspath(
        os.path.join(build_dir, "summary.profdata"))
    cmd = [toolchain.discover_profdata(), "merge", "-sparse"]
    cmd.extend(all_profiles)
    cmd.extend(["-o", summary_index_file])

    subprocess.check_output(" ".join(cmd), cwd=build_dir, shell=True)

    print("Running: ", " ".join(cmd))
    print("Profiles:", all_profiles)
    print("Binaries:", all_binaries)

    cmd = [toolchain.discover_llvm_cov(),
           "show",
           "-ignore-filename-regex=\".*(vendors|llvm|Tests).*\"",
           "-Xdemangler", "c++filt"
           ] + all_binaries + [
        "-instr-profile=" +
        summary_index_file, "-format={}".format(output_format), "-o",
        current_output_dir]

    print("Running", " ".join(cmd))
    print("Working dir:", build_dir)
    subprocess.check_output(" ".join(cmd), cwd=build_dir, shell=True)
    print("Output stored in ", current_output_dir)
