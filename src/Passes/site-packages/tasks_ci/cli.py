# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

from .formatting import main as style_check_main
from .builder import main as builder_main
from .coverage import main as coverage_main
from .linting import main as lint_main, clang_tidy_diagnose

import click
import logging
import sys
import os
from typing import Union, Optional

OptionalInt = Optional[int]
OptionalStr = Union[str, None]

# Important directories
LIB_DIR = os.path.abspath(os.path.dirname((__file__)))
SOURCE_DIR = os.path.abspath(os.path.dirname(os.path.dirname(LIB_DIR)))

# Logging configuration
logger = logging.getLogger()
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

# By default we only log errors
logger.setLevel(logging.ERROR)


@click.group()
@click.option('--loglevel', default="error")
def cli(loglevel: str) -> None:
    """
    Implements the general CLI options such as logging level.
    """

    # Valid values
    levels = {
        "critical": 50,
        "error": 40,
        "warning": 30,
        "info": 20,
        "debug": 10,
        "notset": 0
    }

    # Getting the logging level and updating
    loglevel = loglevel.lower()
    if loglevel not in levels:
        logger.critical("Invalid log level")
        sys.exit(-1)

    logger.setLevel(levels[loglevel])
    logger.info("Loglevel set to {}".format(loglevel))


@cli.command()
@click.option('--fix-issues', default=False, is_flag=True)
def stylecheck(fix_issues: bool) -> None:
    """
    Command for checking the style and optionally fixing issues.
    Note that some issues are not automatically fixed.
    """

    logger.info("Invoking style checker")
    style_check_main(fix_issues)


@cli.command()
@click.option("--diagnose", default=False, is_flag=True)
@click.option('--fix-issues', default=False, is_flag=True)
@click.option('--force', default=False, is_flag=True)
def lint(diagnose: bool, fix_issues: bool, force: bool) -> None:
    """
    Command for linting the code.
    """

    # Helpful option in order to diagnose Clang tidy.
    if diagnose:
        if fix_issues:
            logger.warning(
                "Script will not fix issues while running diagnosis")

        clang_tidy_diagnose()

        # In case we are diagnosing, no run is performed.
        return

    # Allowing Clang tidy to attempt to fix issues. Generally,
    # it is discouraged to use this features as it may result in
    # a catastrophy
    if fix_issues:
        if not force:
            print("""Fixing isssues using Clang Tidy will break your code.
Make sure that you have committed your changes BEFORE DOING THIS.
Even so, this feature is experimental and there have been reports of
clang-tidy modying system libraries - therefore, USE THIS FEATURE AT
YOUR OWN RISK.

Write 'I understand' to proceed.""")
            print(":")
            x = input()
            if x.lower() != "i understand":
                print("Wrong answer - stopping!")
                exit(-1)

    # Running the linter
    logger.info("Invoking linter")
    lint_main(fix_issues)


@cli.command()
@click.option('--debug/--no-debug', default=True)
@click.option('--generator', default=None)
def test(debug: bool, generator: OptionalStr) -> None:
    """
    Command to build and test the code base.
    """

    logger.info("Building and testing")

    build_dir = "Debug"
    if not debug:
        build_dir = "Release"

    builder_main(build_dir, generator, True)


@cli.command()
def runci() -> None:
    """
    Command to run all CI commands, starting with style check
    then linting and finally unit tests.
    """

    build_dir = "Debug"
    logger.info("Checking style")
    style_check_main(False)

    logger.info("Testing")
    builder_main(build_dir, None, True)

    logger.info("Static analysis")
    lint_main(False)


@click.option(
    "--output",
    default=None,
)
@click.option(
    "--format",
    default="html",
)
@cli.command()
def coverage(output: OptionalStr, format: str) -> None:
    """
    Generates a test coverage report
    """

    build_dir = "Debug"

    # Creating a build that generate coverage information and runs the
    # corresponding tests
    builder_main(build_dir, None, False, ["-DMICROSOFT_GENERATE_COVERAGE=ON"])

    # Generating report
    coverage_main(build_dir, output, format)


if __name__ == '__main__':
    cli()
