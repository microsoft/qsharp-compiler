# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

import shutil
import os

extensions = [""]
try:
    extensions = [x.lower() for x in os.getenv('PATHEXT').split(";")]
except:  # noqa: E722
    pass


def discover_formatter_impl(ext: str) -> str:
    """
    Finds the clang-format executable
    """
    ret = shutil.which("clang-format{}".format(ext))
    if ret is not None:
        return ret

    for v in ["11", "10", "12"]:
        ret = shutil.which("clang-format-{}{}".format(v, ext))
        if ret is not None:
            return ret

    return None


def discover_formatter() -> str:
    for ext in extensions:
        ret = discover_formatter_impl(ext)
        if ret is not None:
            return ret

    raise BaseException("Clang format not found")


def discover_tidy_impl(ext: str) -> str:
    """
    Finds the clang-tidy executable
    """
    ret = shutil.which("clang-tidy-cache")
    if ret is not None:
        return ret

    ret = shutil.which("clang-tidy")
    if ret is not None:
        return ret

    for v in ["11", "11.0", "10", "10.0", "12", "12.0"]:
        ret = shutil.which("clang-tidy-{}{}".format(v, ext))
        if ret is not None:
            return ret

    possible_commands = [
        "/usr/bin/clang-tidy-10",
        "/usr/bin/clang-tidy-11",
        "/usr/local/bin/clang-tidy-10",
        "/usr/local/bin/clang-tidy-11",
    ]

    for c in possible_commands:
        if os.path.exists(c):
            return c

    return None


def discover_tidy() -> str:
    for ext in extensions:
        ret = discover_tidy_impl(ext)
        if ret is not None:
            return ret

    raise BaseException("Clang tidy not found")


def discover_cmake_impl(ext: str) -> str:
    """
    Finds the cmake executable
    """
    ret = shutil.which("cmake{}".format(ext))

    if ret is not None:
        return ret

    # Test more locations here

    # Finally returns None to indicate failed attempt at finding CMake
    return None


def discover_cmake() -> str:
    for ext in extensions:
        ret = discover_cmake_impl(ext)
        if ret is not None:
            return ret

    raise BaseException("CMake not found")


def discover_ctest_impl(ext: str) -> str:
    """
    Finds the ctest executable
    """
    ret = shutil.which("ctest{}".format(ext))

    if ret is not None:
        return ret

    return None


def discover_ctest() -> str:
    for ext in extensions:
        ret = discover_ctest_impl(ext)
        if ret is not None:
            return ret

    raise BaseException("CTest not found")


def discover_profdata_impl(ext: str) -> str:
    """
    Finds the llvm-profdata executable
    """
    ret = shutil.which("llvm-profdata{}".format(ext))

    if ret is not None:
        return ret

    return None


def discover_profdata() -> str:
    for ext in extensions:
        ret = discover_profdata_impl(ext)
        if ret is not None:
            return ret

    raise BaseException("llvm-profdata not found")


def discover_llvm_cov_impl(ext: str) -> str:
    """
    Finds the ctest executable
    """
    ret = shutil.which("llvm-cov{}".format(ext))

    if ret is not None:
        return ret

    return None


def discover_llvm_cov() -> str:
    for ext in extensions:
        ret = discover_llvm_cov_impl(ext)
        if ret is not None:
            return ret

    raise BaseException("llvm-cov not found")
