# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

import logging
import subprocess
import re
import os
from . import toolchain
from typing import Union

logger = logging.getLogger("Coverage")

TEST_PATTERN = r"\d+: Test command: (?P<path>[\w/-]+)( \"\w+\")?"


def find_test_executables(build_dir):
    """
    Finds executable tests in the build dir.
    """
    ret = []
    output = subprocess.check_output(
        [toolchain.discover_ctest(), "-N", "--debug"], cwd=build_dir).decode("utf-8")

    for match in re.finditer(TEST_PATTERN, output):
        ret.append(match.group("path"))

    return ret


def main(build_dir: str, output_dir: Union[str, None] = None):
    """
    Builds and generates coverage reports.
    """
    test_executables = find_test_executables(build_dir)

    if output_dir is None:
        output_dir = os.path.abspath(os.path.join(build_dir, "CoverageReport"))
        try:
            os.mkdir(output_dir)
        except:  # noqa: E722
            pass

    for exe in test_executables:
        try:
            subprocess.check_output("{} 2>&1 1> /dev/null".format(exe), cwd=build_dir, shell=True)
        except:  # noqa: E722
            logger.error("Failed to run test: ", exe)
            continue

        # File names
        logger.info("Generating coverage report for {}".format(os.path.basename(exe)))
        basename = os.path.join("Source", os.path.basename(exe))
        dest_file = "{}.profraw".format(exe)
        index_file = "{}.index".format(exe)
        current_output_dir = os.path.join(output_dir, os.path.basename(exe))

        # Moving the file for the target
        src = os.path.join(build_dir, "default.profraw")
        dest = os.path.join(build_dir, dest_file)
        os.rename(src, dest)

        # Generating index
        try:
            cmd1 = [toolchain.discover_profdata(), "merge", "-sparse", dest_file, "-o", index_file]
            subprocess.check_output(cmd1, cwd=build_dir)
        except:  # noqa: E722
            logger.error("Failed to generate index for: ", exe)
            continue

        # Generating report
        try:
            cmd2 = [toolchain.discover_llvm_cov(), "show",
                    "-ignore-filename-regex=\".*(vendors|llvm|Tests).*\"",
                    "-Xdemangler", "c++filt", basename,
                    "-instr-profile=" + index_file, "-format=html", "-o",
                    current_output_dir]
            subprocess.check_output(" ".join(cmd2), cwd=build_dir, shell=True)
            logger.info("Report saved in {}".format(current_output_dir))

        except:  # noqa: E722
            logger.error("Failed to create report for: ", exe)
            continue
