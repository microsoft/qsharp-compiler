#pragma once
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

#include "Llvm.hpp"

namespace microsoft {
namespace quantum {

class {name}Analytics : public llvm::AnalysisInfoMixin<{name}Analytics>
{
public:
  using Result = llvm::StringMap<unsigned>; ///< Change the type of the collected date here

  /// Constructors and destructors
  /// @{
  {name}Analytics()                         = default;
  {name}Analytics({name}Analytics const &)  = delete;
  {name}Analytics({name}Analytics &&)       = default;
  ~{name}Analytics()                        = default;
  /// @}

  /// Operators
  /// @{
  {name}Analytics &operator=({name}Analytics const &) = delete;
  {name}Analytics &operator=({name}Analytics &&) = delete;
  /// @}

  /// Functions required by LLVM
  /// @{
  Result run(llvm::Function & function, llvm::FunctionAnalysisManager & /*unused*/);
  /// @}

private:
  static llvm::AnalysisKey Key;  // NOLINT
  friend struct llvm::AnalysisInfoMixin<{name}Analytics>;
};

class {name}Printer : public llvm::PassInfoMixin<{name}Printer>
{
public:
  /// Constructors and destructors
  /// @{
  explicit {name}Printer(llvm::raw_ostream& out_stream);  
  {name}Printer()                       = delete;
  {name}Printer({name}Printer const &)  = delete;
  {name}Printer({name}Printer &&)       = default;
  ~{name}Printer()                      = default;
  /// @}

  /// Operators
  /// @{
  {name}Printer &operator=({name}Printer const &) = delete;
  {name}Printer &operator=({name}Printer &&) = delete;
  /// @}

  /// Functions required by LLVM
  /// @{
  llvm::PreservedAnalyses run(llvm::Function & function, llvm::FunctionAnalysisManager & fam);
  static bool             isRequired();
  /// @}
private:
  llvm::raw_ostream& out_stream_;  
};

}  // namespace quantum
}  // namespace microsoft
